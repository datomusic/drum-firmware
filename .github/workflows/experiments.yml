name: Experiments

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Install gcc-arm
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: '13.3.Rel1'

      - name: Checkout
        uses: actions/checkout@v4

      # - id: cache-pico-build
      #   name: Cache Pico build deps
      #   uses: actions/cache@v4
      #   env:
      #     cache-name: cache-pico-build
      #   with:
      #     path: |
      #       musin/ports/pico/pico-sdk
      #       musin/ports/pico/pico-extras
      #       musin/ports/pico/libraries/pico-vfs
      #       lib/etl

      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-pico-build
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-
      #       ${{ runner.os }}-build-
      #       ${{ runner.os }}-
      
      # - if: ${{ steps.cache-pico-build.outputs.cache-hit != 'true' }} 
      #   name: Init submodules
      #   run: |
      #     git submodule update --init --recursive musin/ports/pico/pico-sdk
      #     git submodule update --init --recursive musin/ports/pico/pico-extras
      #     git submodule update --init --recursive musin/ports/pico/libraries/pico-vfs

      - name: Init submodules
        run: |
          git submodule update --init --recursive musin/ports/pico/pico-sdk
          git submodule update --init --recursive musin/ports/pico/pico-extras
          git submodule update --init --recursive musin/ports/pico/libraries/pico-vfs


      - id: cache-picotool
        name: Install picotool
        uses: actions/cache@v4
        env:
          cache-name: cache-picotool
        with:
          path: |
            /usr/local/bin/picotool
            /usr/local/lib/cmake/picotool
            /usr/local/share/picotool

          key: ${{ runner.os }}-build-${{ env.cache-name }}-picotool
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-


      - if: ${{ steps.cache-picotool.outputs.cache-hit != 'true' }} 
        name: Install picotool
        run: |
          git clone https://github.com/raspberrypi/picotool.git
          cd picotool
          mkdir build
          cd build
          cmake -DPICO_SDK_PATH=../../musin/ports/pico/pico-sdk ..
          make
          sudo make install



      - id: cache-etl
        name: Cache ETL
        uses: actions/cache@v4
        env:
          cache-name: cache-etl
        with:
          path: lib/etl
          key: ${{ runner.os }}-build-${{ env.cache-name }}-etl
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-etl

      - if: ${{ steps.cache-etl.outputs.cache-hit != 'true' }} 
        name: Checkout etl
        run: git submodule update --init lib/etl

      - name: Build examples
        run: bash ./build_experiments.sh
