name: Build and attach binary to release

on:
  release:
    types: [created]

jobs:
  build-and-attach:
    runs-on: ubuntu-latest
    
    steps:
      # Required for GitHub Actions cache to work with root-owned directories in containers
      - name: Allow caching of root-owned directories
        run: sudo chown root /bin/tar && sudo chmod u+s /bin/tar

      - name: Checkout
        uses: actions/checkout@v4

      - id: cache-pico-sdk
        name: Cache pico SDK
        uses: actions/cache@v4
        env:
          cache-name: cache-pico-sdk
        with:
          path: musin/ports/pico/pico-sdk
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - if: ${{ steps.cache-pico-sdk.outputs.cache-hit != 'true' }}
        name: Checkout pico SDK
        run: git submodule update --init --recursive musin/ports/pico/pico-sdk

      - id: cache-extras
        name: Cache pico extras
        uses: actions/cache@v4
        env:
          cache-name: cache-extras
        with:
          path: musin/ports/pico/pico-extras
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - if: ${{ steps.cache-extras.outputs.cache-hit != 'true' }}
        name: Checkout pico extras
        run: git submodule update --init --recursive musin/ports/pico/pico-extras

      - id: cache-pico-vfs
        name: Cache pico pico-vfs
        uses: actions/cache@v4
        env:
          cache-name: cache-pico-vfs
        with:
          path: musin/ports/pico/libraries/pico-vfs
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - if: ${{ steps.cache-pico-vfs.outputs.cache-hit != 'true' }}
        name: Checkout pico pico-vfs
        run: git submodule update --init --recursive musin/ports/pico/libraries/pico-vfs

      - id: cache-etl
        name: Cache ETL
        uses: actions/cache@v4
        env:
          cache-name: cache-etl
        with:
          path: lib/etl
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - if: ${{ steps.cache-etl.outputs.cache-hit != 'true' }}
        name: Checkout etl
        run: git submodule update --init lib/etl

      - name: Install gcc-arm
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: '14.2.Rel1'

      - id: cache-picotool
        name: Cache picotool
        uses: actions/cache@v4
        env:
          cache-name: cache-picotool
        with:
          path: |
            /usr/local/bin/picotool
            /usr/local/lib/cmake/picotool
            /usr/local/share/picotool
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - if: ${{ steps.cache-picotool.outputs.cache-hit != 'true' }}
        name: Install picotool
        run: |
          git clone https://github.com/raspberrypi/picotool.git
          cd picotool
          mkdir build
          cd build
          cmake -DPICO_SDK_PATH=../../musin/ports/pico/pico-sdk ..
          make
          sudo make install

      - name: Build firmware
        working-directory: drum
        run: cmake -S . -B build -DPICO_BOARD=dato_submarine && cd build && make -j

      - name: Get release tag
        id: get_release
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          # Validate tag format is safe for filename
          if [[ ! "$TAG" =~ ^[a-zA-Z0-9._-]+$ ]]; then
            echo "Error: Release tag '$TAG' contains invalid characters for filename"
            echo "Tag must only contain letters, numbers, dots, underscores, and hyphens"
            exit 1
          fi

      - name: Find and rename binary
        run: |
          cd drum/build
          BINARY_FILES=$(find . -name "drum-*.uf2")
          BINARY_COUNT=$(echo "$BINARY_FILES" | wc -l)
          
          if [ -z "$BINARY_FILES" ]; then
            echo "Error: No .uf2 file found"
            exit 1
          fi
          
          if [ "$BINARY_COUNT" -gt 1 ]; then
            echo "Error: Multiple .uf2 files found:"
            echo "$BINARY_FILES"
            echo "Expected exactly one drum-*.uf2 file"
            exit 1
          fi
          
          BINARY_FILE="$BINARY_FILES"
          TARGET_NAME="drum-${{ steps.get_release.outputs.tag }}.uf2"
          if [ "$(basename "$BINARY_FILE")" != "$TARGET_NAME" ]; then
            mv "$BINARY_FILE" "$TARGET_NAME"
          fi

      - name: Verify binary exists
        run: test -f ./drum/build/drum-${{ steps.get_release.outputs.tag }}.uf2

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./drum/build/drum-${{ steps.get_release.outputs.tag }}.uf2
          asset_name: drum-${{ steps.get_release.outputs.tag }}.uf2
          asset_content_type: application/octet-stream

      # Cleanup build artifacts and cache on failure to prevent pollution
      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Release build failed, cleaning up artifacts and cache..."
          # Remove build directory
          rm -rf drum/build
          # Clear any temporary cmake files
          find . -name "CMakeCache.txt" -delete 2>/dev/null || true
          find . -name "CMakeFiles" -type d -exec rm -rf {} + 2>/dev/null || true
          # Remove any partially created release assets
          rm -f ./drum/build/drum-*.uf2 2>/dev/null || true
          # Remove any corrupted cache keys by invalidating them
          echo "::warning::Release build failed - cached dependencies may need to be refreshed on retry"
